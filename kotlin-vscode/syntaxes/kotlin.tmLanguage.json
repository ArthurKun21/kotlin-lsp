{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Kotlin",
  "scopeName": "source.kotlin",
  "fileTypes": [
    "kt",
    "kts"
  ],
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#annotations"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#variables"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#interpolation"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "match": "\\b(val|var|fun|class|interface|annotation|companion|object|package|import|typealias|companion|this|super|constructor|init|value)\\b",
          "name": "storage.type.kotlin"
        },
        {
          "match": "\\b(override|abstract|final|open|enum|sealed|data|inline|noinline|tailrec|external|const|suspend|expect|actual|private|public|internal|protected|lateinit|vararg|crossinline|operator|infix|reified)\\b",
          "name": "storage.modifier.kotlin"
        },
        {
          "match": "\\b(if|else|when|for|do|while|return|break|continue|throw|try|catch|finally|in|is|as|by|get|set|where)\\b",
          "name": "keyword.control.kotlin"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "match": "\\b(Boolean|Byte|Char|Short|Int|Long|Float|Double|String|Array|List|Set|Map|Nothing|Unit|Any|dynamic)\\b",
          "name": "support.type.kotlin"
        },
        {
          "match": "\\b(true|false|null)\\b",
          "name": "constant.language.kotlin"
        }
      ]
    },
    "annotations": {
      "patterns": [
        {
          "name": "meta.annotation.kotlin",
          "begin": "@\\[?",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.annotation.kotlin"
            }
          },
          "end": "\\]?",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.annotation.kotlin"
            }
          },
          "patterns": [
            {
              "match": "[a-zA-Z_][a-zA-Z0-9_]*",
              "name": "entity.name.function.annotation.kotlin"
            }
          ]
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.triple.kotlin",
          "begin": "\"\"\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.kotlin"
            }
          },
          "end": "\"\"\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.kotlin"
            }
          },
          "patterns": [
            {
              "include": "#interpolation"
            }
          ]
        },
        {
          "name": "string.quoted.double.kotlin",
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.kotlin"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.kotlin"
            }
          },
          "patterns": [
            {
              "include": "#interpolation"
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "match": "\\b(0[bB][01_]+)\\b",
          "name": "constant.numeric.binary.kotlin"
        },
        {
          "match": "\\b(0[xX][0-9a-fA-F_]+)\\b",
          "name": "constant.numeric.hex.kotlin"
        },
        {
          "match": "\\b([0-9]+(\\.[0-9]+)?([eE][+-]?[0-9]+)?)\\b",
          "name": "constant.numeric.decimal.kotlin"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.kotlin",
          "match": "//.*$"
        },
        {
          "name": "comment.block.documentation.kotlin",
          "begin": "/\\*\\*",
          "end": "\\*/"
        },
        {
          "name": "comment.block.kotlin",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "match": "\\bfun\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "entity.name.function.kotlin"
            }
          }
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "match": "\\b(val|var)\\s+([a-zA-Z_][a-zA-Z0-9_]*)(\\s*:\\s*[a-zA-Z_][a-zA-Z0-9_.<>]*)?",
          "captures": {
            "1": {
              "name": "storage.type.kotlin"
            },
            "2": {
              "name": "variable.other.readwrite.kotlin"
            },
            "3": {
              "name": "entity.name.type.kotlin"
            }
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "match": "(==|!=|===|!==|<=|>=|\\+=|\\-=|\\*=|/=|%=|->|\\||&&|\\?|!!|!|\\.\\.|::|\\.|\\?\\.|\\?\\:|<|>|\\+|\\-|\\*|/|%|=|\\:)",
          "name": "keyword.operator.kotlin"
        }
      ]
    },
    "expressions": {
      "patterns": [
        {
          "include": "#strings"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#variables"
        },
        {
          "include": "#operators"
        }
      ]
    },
    "interpolation": {
      "patterns": [
        {
          "name": "constant.character.escape.kotlin",
          "match": "\\\\(u[0-9a-fA-F]{4}|[btnr\"'\\\\])"
        },
        {
          "name": "variable.other.interpolated.kotlin",
          "match": "\\$[a-zA-Z_][a-zA-Z0-9_]*"
        },
        {
          "name": "variable.other.interpolated.expression.kotlin",
          "begin": "\\${",
          "end": "}",
          "patterns": [
            {
              "include": "#expressions"
            }
          ]
        }
      ]
    }
  }
}